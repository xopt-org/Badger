"use strict";(self.webpackChunkbadger_home=self.webpackChunkbadger_home||[]).push([[73],{7349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guides/gui-usage","title":"GUI Usage","description":"Once you launch Badger in GUI mode, you\'ll have various Badger features to explore. You can search through this page to get to the guide on any specify GUI feature, or if you believe a guide is missing for the topic you are interested in, please consider raising an issue here or shooting us an email, many thanks :)","source":"@site/docs/guides/gui-usage.md","sourceDirName":"guides","slug":"/guides/gui-usage","permalink":"/Badger/docs/next/guides/gui-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/SLAC-ML/Badger-Home/edit/master/docs/guides/gui-usage.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Tutorial (CLI mode)","permalink":"/Badger/docs/next/getting-started/tutorial_1"},"next":{"title":"CLI Usage","permalink":"/Badger/docs/next/guides/cli-usage"}}');var o=t(4848),a=t(8453);const r={sidebar_position:1},s="GUI Usage",l={},d=[{value:"GUI Layout",id:"gui-layout",level:2},{value:"Environment + VOCS",id:"environment--vocs",level:3},{value:"Algorithm",id:"algorithm",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Loading a template",id:"loading-a-template",level:3},{value:"To Define a New Optimization Routine",id:"to-define-a-new-optimization-routine",level:2},{value:"Running the Optimization",id:"running-the-optimization",level:2},{value:"Defining Template Files",id:"defining-template-files",level:2},{value:"Overview of Different Optimization Algorithms",id:"overview-of-different-optimization-algorithms",level:2},{value:"Nelder-Mead",id:"nelder-mead",level:3},{value:"Extremum Seeking",id:"extremum-seeking",level:3},{value:"Expected Improvement (Bayesian Optimization)",id:"expected-improvement-bayesian-optimization",level:3},{value:"RCDS",id:"rcds",level:3}];function c(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"gui-usage",children:"GUI Usage"})}),"\n",(0,o.jsxs)(n.p,{children:["Once you launch Badger in GUI mode, you'll have various Badger features to explore. You can search through this page to get to the guide on any specify GUI feature, or if you believe a guide is missing for the topic you are interested in, please consider ",(0,o.jsx)(n.a,{href:"https://github.com/xopt-org/Badger/issues/new",children:"raising an issue here"})," or ",(0,o.jsx)(n.a,{href:"mailto:zhezhang@slac.stanford.edu",children:"shooting us an email"}),", many thanks :)"]}),"\n",(0,o.jsx)(n.h2,{id:"gui-layout",children:"GUI Layout"}),"\n",(0,o.jsxs)(n.p,{children:["The Badger GUI is an interface made for optimizing accelerator performance. Behind the scenes, Badger uses Xopt, a python package designed to support a wide variety of control system optimization problems and algorithms. There are four important sections to defining an optimization problem using the Badger GUI: ",(0,o.jsx)(n.strong,{children:"Environment"}),", ",(0,o.jsx)(n.strong,{children:"VOCS"}),", ",(0,o.jsx)(n.strong,{children:"Algorithm"}),", and ",(0,o.jsx)(n.strong,{children:"Metadata"}),". The Badger GUI organizes these into three tabs, with Environment + VOCS being combined into a single main tab."]}),"\n",(0,o.jsx)(n.h3,{id:"environment--vocs",children:"Environment + VOCS"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Environment"})," defines available variables and observables for a specific machine or control system. At SLAC, possible environments include ",(0,o.jsx)(n.code,{children:"LCLS"}),", ",(0,o.jsx)(n.code,{children:"FACET"}),", and ",(0,o.jsx)(n.code,{children:"LCLS_II"}),". Each environment contains information about the variables available within that system, such as their bounds, along with operational parameters for data collection such as number of points, trim delay, fault timeout, and other information related to the interaction between the optimizer and the physical or simulated environment."]}),"\n",(0,o.jsxs)(n.p,{children:["Within an environment, an optimization problem can be defined by selecting which variables to adjust, objectives to optimize, and any constraints to follow. ",(0,o.jsx)(n.strong,{children:"VOCS"})," represents the subset of variables, objectives, and constraints to be optimized within the environment. You can also add observables within the VOCS section, which the GUI will monitor and display but won\u2019t otherwise interact with. The \u201cConstraints\u201d and \u201cObservables\u201d sections are optional for defining an optimization and are collapsed by default. They can be accessed by clicking on ",(0,o.jsx)(n.strong,{children:"More"})," at the bottom of the Environment + VOCS tab."]}),"\n",(0,o.jsx)(n.h3,{id:"algorithm",children:"Algorithm"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Algorithm"})," section lets you select an algorithm to use for optimization. See \u201c",(0,o.jsx)(n.em,{children:"Overview of Different Optimization Algorithms"}),"\u201d for a more detailed overview of different options. Common algorithms used at SLAC are expected improvement and nelder-mead."]}),"\n",(0,o.jsx)(n.h3,{id:"metadata",children:"Metadata"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Metadata"})," includes a name and description for the optimization routine."]}),"\n",(0,o.jsx)(n.h3,{id:"loading-a-template",children:"Loading a template"}),"\n",(0,o.jsxs)(n.p,{children:["If there is already a template for the optimization you\u2019d like to run, click the ",(0,o.jsx)(n.strong,{children:"Load Template"})," button at the upper left of the ",(0,o.jsx)(n.strong,{children:"Environment + VOCS"})," tab, and select the appropriate template. Make sure to check the environment parameters, variables and variable ranges, objectives, constraints/observables, and selected algorithm before running the optimization."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"to-define-a-new-optimization-routine",children:"To Define a New Optimization Routine"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Start by selecting the target environment"})," from the ",(0,o.jsx)(n.strong,{children:"Environment"})," dropdown. Click the ",(0,o.jsx)(n.strong,{children:"Parameters"})," button to expand the available environment parameters."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"From the \u201cVariables\u201d table select devices to be optimized."}),(0,o.jsx)(n.br,{}),"\n","The variables table shows all the variables which have been included in the selected environment. You can also toggle the ",(0,o.jsx)(n.strong,{children:"Show Checked Only"})," checkbox to only display selected variables. If a device you\u2019d like to try to optimize is not listed, you can scroll to the bottom of the table and enter a new PV. The ",(0,o.jsx)(n.strong,{children:"Min"})," and ",(0,o.jsx)(n.strong,{children:"Max"})," columns in the table show the bounds of the search space for optimization. If the ",(0,o.jsx)(n.strong,{children:"Automatic"})," checkbox above the table is checked, these bounds will be \xb1 some percentage from the current value. Clicking ",(0,o.jsx)(n.strong,{children:"Set Variable Range"})," will open a dialog window showing that ratio, and an option to select either relative to current or relative to the full variable range. Unchecking ",(0,o.jsx)(n.strong,{children:"Automatic"})," allows you to manually set variable ranges by editing the values in the ",(0,o.jsx)(n.strong,{children:"Min"})," and ",(0,o.jsx)(n.strong,{children:"Max"})," columns."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"If the \u201cAutomatic\u201d checkbox is checked, selecting a variable will automatically add a set of initial points."}),(0,o.jsx)(n.br,{}),"\n","By default, these will be the current value followed by three random points within a fraction of the variable bounds centered around the current value. If ",(0,o.jsx)(n.strong,{children:"Automatic"})," is not checked, or to adjust the initial points, you can use the ",(0,o.jsx)(n.strong,{children:"Add Current"})," and ",(0,o.jsx)(n.strong,{children:"Add Random"})," buttons to configure your own initial points."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Select an objective from the \u201cObjectives\u201d table."}),(0,o.jsx)(n.br,{}),"\n","Make sure to select whether the objective should be maximized or minimized! Currently only single objective optimization is available, but multi-objective optimization will be supported in the future."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add constraints and observables."}),(0,o.jsx)(n.br,{}),"\n","Beneath the ",(0,o.jsx)(n.strong,{children:"Objectives"})," table is a collapsable ",(0,o.jsx)(n.strong,{children:"More"})," section, which allows you to add Constraints and Observables. The constraints and observables available for selection are based on the selected environment."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Choose an optimization algorithm."}),(0,o.jsx)(n.br,{}),"\n","There are several different optimization algorithms available within the Badger GUI. Generally, ",(0,o.jsx)(n.strong,{children:"expected improvement"})," and ",(0,o.jsx)(n.strong,{children:"Nelder-Mead"}),' are good choices for online accelerator optimization. To select an algorithm navigate to the "Algorithm" tab. To read more about different algorithms, see the "',(0,o.jsx)(n.a,{href:"#overview-of-different-optimization-algorithms",children:"Overview of Different Optimization Algorithms"}),"\u201d section below."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Metadata:"}),(0,o.jsx)(n.br,{}),"\n","Provide a name and description for your optimization routine."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"running-the-optimization",children:"Running the Optimization"}),"\n",(0,o.jsxs)(n.p,{children:["Once the environment, variables, objectives, and algorithm (and any optional constraints and observables) have been defined, the optimization can be started by pressing the green ",(0,o.jsx)(n.strong,{children:"run"})," button at the lower center of the GUI. Badger will begin by measuring the objective at the initial points specified in the ",(0,o.jsx)(n.strong,{children:"Initial Points"})," table, and will then begin to optimize the selected variables using the chosen algorithm. When the scan is active, the green ",(0,o.jsx)(n.strong,{children:"run"})," button will turn into a red ",(0,o.jsx)(n.strong,{children:"stop"})," button."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Once the scan has started, it can be paused/resumed using the ",(0,o.jsx)(n.strong,{children:"play/pause"})," button to the left of the ",(0,o.jsx)(n.strong,{children:"run"})," button."]}),"\n",(0,o.jsxs)(n.li,{children:["To end the optimization run, press the red ",(0,o.jsx)(n.strong,{children:"stop"})," button."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["After ending the optimization, you may want to take some sort of action on the variables/devices being optimized. Depending on the algorithm selected, the last point/state sampled may not be the best that was found during the optimization run. To select the best configuration of variables that was measured, press ",(0,o.jsx)(n.strong,{children:"Jump to Optimal"})," (star icon button) to the right of the stop/start button. Alternatively, clicking any point in the optimization plot will highlight the variable values at that point in the scan. Once you\u2019ve chosen the solution you\u2019d like to implement, press ",(0,o.jsx)(n.strong,{children:"Dial in solution"})," to set devices to the selected values."]}),"\n",(0,o.jsxs)(n.p,{children:["To reset all the variables to their values at the beginning of the scan, press the ",(0,o.jsx)(n.strong,{children:"Reset Environment"})," button."]}),"\n",(0,o.jsx)(n.p,{children:"While the optimization is running, the values of the variables, objectives, and (if selected) constraints and observables will be plotted in the plot section in the top right corner of the GUI. By default, the X-Axis displays the number of optimization iterations, and the Y-Axis for the variables plot is relative to each variable\u2019s starting value. These options can be changed from the GUI via options in the top right corner, above the plots."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"defining-template-files",children:"Defining Template Files"}),"\n",(0,o.jsxs)(n.p,{children:["To save the current scan parameters as a template from the GUI, navigate to the ",(0,o.jsx)(n.strong,{children:"Metadata"})," tab. Click ",(0,o.jsx)(n.strong,{children:"Save as Template"}),", and enter an appropriate filename ending in \u201c.yaml\u201d. This will save the Environment, VOCS, Algorithm, and Metadata currently displayed on the GUI to a YAML file, including environment and algorithm parameters and relative variable ranges, and the configuration of initial points."]}),"\n",(0,o.jsx)(n.p,{children:"Templates can also be directly saved or edited as YAML files, with the following format:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"name: ''            # name of template\ndescription: ''     # description of template\nenvironment:\n  name: ''          # environment name\n  params: {}        # environment parameters, depend on environment\ngenerator:\n  name:             # generator name\n  # params will depend on generator\nvocs:               # XOPT VOCS\n  constants: {}     # {constant_name: value}\n  constraints: {}   # {constraint_name: [GREATER_THAN or LESS_THAN, value]}\n  objectives: {}    # {objective_name: MINIMIZE or MAXIMIZE}\n  observables: []   # list of observable names\n  variables: {}     # {variable_name: [lower_bound, upper_bound]}\n                    \n                    # Note that the variable upper and lower bound should be\n                    # the absolute variable range limits, not the limit of the \n                    # optimization. The range of the optimization is set based \n                    # on vrange_limit_options for each variable, either as a \n                    # fraction of the full range or \xb1 a fraction of the\n                    # current value.\n\nvrange_limit_options: {} \n\n                    # for each variable:\n                    #   variable: {limit_option_idx: 0 or 1, ratio_curr: 0.1, ratio_full: 0.1}\n                    # For example:\n                    #   QUAD:LTUH:620:BCTRL:\n                    #   limit_option_idx: 0\n                    #   ratio_curr: 0.1 \n                    #   ratio_full: 0.1\n                    # Note that ratio_curr is the ratio with respect to the current value\n                    # and ratio_full is the ratio with respect to the full variable range.\n                    # limit_option_idx 0 will use ratio_curr, 1 is ratio_full\n\nrelative_to_current: true  # true or false.\ninitial_point_actions: [{}]  # list of dictionaries\n\n                    # Will be read sequentially.\n                    # For example, the two most common options would look like:\n                    #\n                    # - type: add_curr     # will add the current value of selected vars\n                    # - config: \n                    #     fraction: 0.1\n                    #     method: 0\n                    #     n_points: 3\n                    #   type: add_rand\n                    #\n                    # will add three random points for each variable, selected\n                    # from within 0.1*(the vrange limit ratio for that \n                    # variable) around the current value \u2013 i.e. sample n random \n                    # points from within a subset of the scan range\n\ncritical_constraint_names: []  # list of constraints (from VOCS) to be marked as \u2018critical\u2019\nbadger_version:     # optional but helpful\nxopt_version:       # optional but helpful\n"})}),"\n",(0,o.jsx)(n.h2,{id:"overview-of-different-optimization-algorithms",children:"Overview of Different Optimization Algorithms"}),"\n",(0,o.jsx)(n.h3,{id:"nelder-mead",children:"Nelder-Mead"}),"\n",(0,o.jsx)(n.p,{children:"Iterative downhill simplex algorithm which seeks to find local optima by sampling initial points and then using a heuristic to choose the next point during each iteration. Nelder-Mead has been widely used inside accelerator physics."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Low computational cost"}),"\n",(0,o.jsx)(n.li,{children:"Historically proven performance in the context of accelerator physics"}),"\n",(0,o.jsx)(n.li,{children:"Automatic/adaptive hyperparameter specification depending on problem characteristics"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Disadvantages:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Local optimizer \u2013 sensitive to initial starting conditions"}),"\n",(0,o.jsx)(n.li,{children:"Sensitive to measurement noise which can negatively impact convergence to optimum"}),"\n",(0,o.jsx)(n.li,{children:"Scales poorly to higher dimensional problems"}),"\n",(0,o.jsx)(n.li,{children:"Cannot handle observational constraints"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"extremum-seeking",children:"Extremum Seeking"}),"\n",(0,o.jsx)(n.p,{children:"Perform small oscillations to measurement to slowly move towards minimum. This algorithm uses a sinusoidal sampling strategy for each parameter to slowly drift towards optimal operating conditions and track time dependent changes in the optimal operating conditions over time. It\u2019s useful for time dependent optimization, where short term drifts in accelerator conditions can lead to a time dependent objective function."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Low computational cost"}),"\n",(0,o.jsx)(n.li,{children:"Can track time-dependent drifts of the objective function to maintain an optimal operating configuration"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Disadvantages:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Local optimizer, sensitive to initial starting conditions"}),"\n",(0,o.jsx)(n.li,{children:"Additional hyperparameters that must be tuned to a given optimization problem"}),"\n",(0,o.jsx)(n.li,{children:"Scales poorly to higher dimensional problems"}),"\n",(0,o.jsx)(n.li,{children:"Cannot handle observational constraints"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"expected-improvement-bayesian-optimization",children:"Expected Improvement (Bayesian Optimization)"}),"\n",(0,o.jsx)(n.p,{children:"Bayesian Optimization (BO) algorithms are machine learning-based algorithms that are particularly well suited to efficiently optimizing noisy objectives with few iterations. Using data collected during and/or prior to optimization, BO algorithms use Bayesian statistics to build a model of the objective function that predicts a distribution of possible function values at each point in parameter space. It then uses an acquisition function to make sampling decisions based on determining the global optimum of the objective function."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Global or local optimization depending on algorithm specifications"}),"\n",(0,o.jsx)(n.li,{children:"Creates an online surrogate model of the objective and any constraint functions, which can be used during or after optimization"}),"\n",(0,o.jsx)(n.li,{children:"Can account for observational constraints"}),"\n",(0,o.jsx)(n.li,{children:"Can incorporate rich prior information about the optimization problem to improve convergence"}),"\n",(0,o.jsx)(n.li,{children:"Explicitly handles measurement uncertainty and/or noisy objectives"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Disadvantages:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Potentially significant computational costs, especially after many iterations"}),"\n",(0,o.jsx)(n.li,{children:"Numerous hyperparameters which can affect performance"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"rcds",children:"RCDS"}),"\n",(0,o.jsx)(n.p,{children:"Robust Conjugate Direction Search makes decisions via successive local approximations of the objective function to converge to an optimum. RCDS may be more efficient than Nelder-Mead but requires multiple iterations initially to establish a local model of the objective function before starting to optimize."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Low computational cost"}),"\n",(0,o.jsx)(n.li,{children:"Historically proven performance in the context of accelerator physics"}),"\n",(0,o.jsx)(n.li,{children:"Can account for measurement noise via algorithm hyperparameter"}),"\n",(0,o.jsx)(n.li,{children:"Can control scaling of step size"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Disadvantages:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Local optimizer, sensitive to initial starting conditions"}),"\n",(0,o.jsx)(n.li,{children:"Scales poorly to higher dimensional problems"}),"\n",(0,o.jsx)(n.li,{children:"Cannot handle observational constraints"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);